{"version":3,"sources":["utils/game.js","components/EventArea/EventArea.js","components/FamilyArea/FamilyArea.js","components/ActionTextArea/ActionTextArea.js","components/Letter/Letter.js","components/WordArea/WordArea.js","components/KeyboardArea/KeyboardArea.js","components/SelectedLetters/SelectedLetters.js","App.js","serviceWorker.js","index.js"],"names":["logic","words","colorStatus","available","unavailable","cursorStatus","chooseWord","Math","floor","random","length","toUpperCase","split","displayWord","word","selectedLetters","map","letter","indexOf","EventArea","react_default","a","createElement","className","src","alt","FamilyArea","ActionTextArea","props","actionMessage","Letter","status","style","color","onClick","letterValue","WordArea","i","components_Letter_Letter","key","keys","letterStatus","arr","console","log","KeyboardArea","slice","SelectedLetters","App","_useGameState","_useState","useState","currentWord","Object","slicedToArray","_useState3","_useState4","selectedLetter","setSelectedLetter","_useState5","_useState6","setSelectedLetters","_useState7","_useState8","setActionMessage","_useState9","_useState10","setDisplayWord","setGameState","newSelectedLetters","concat","returnMessage","newDisplayWord","useGameState","components_EventArea_EventArea","components_FamilyArea_FamilyArea","components_ActionTextArea_ActionTextArea","components_WordArea_WordArea","components_SelectedLetters_SelectedLetters","components_KeyboardArea_KeyboardArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8WAAMA,EAAQ,CACZC,MAAO,CACL,YACA,YACA,UACA,QACA,WACA,QACA,UACA,UACA,aACA,UACA,UACA,cACA,UACA,YACA,UACA,UACA,eACA,SAEFC,YAAa,CACXC,UAAW,OACXC,YAAa,WAEfC,aAAc,GACdC,WAAY,WACV,OAAON,EAAMC,MAAMM,KAAKC,MAAMD,KAAKE,SAAWT,EAAMC,MAAMS,SACvDC,cACAC,MAAM,KAEXC,YAAa,SAACC,EAAMC,GAClB,OAAOD,EAAKE,IAAI,SAAAC,GAAM,OACpBF,EAAgBG,QAAQD,IAAW,EAAIA,EAAS,QAKvCjB,ICvBAmB,qBAXG,kBAChBC,EAAAC,EAAAC,cAAA,WAASC,UAAU,gBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,sBAAsBC,IAAI,iBAErCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,yBAAyBC,IAAI,oBCK7BC,SAXI,kBACjBN,EAAAC,EAAAC,cAAA,WAASC,UAAU,UACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,SACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,QACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,eCDWI,SANQ,SAAAC,GAAK,OAC1BR,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,SAAIM,EAAMC,kBCcCC,eAdA,SAAAF,GACb,OACER,EAAAC,EAAAC,cAAA,OACEC,UAAWK,EAAMG,OAAS,UAC1BC,MAAO,CACLC,MAAOjC,EAAME,YAAY0B,EAAMG,SAEjCG,QAAS,kBAAMN,EAAMM,QAAQN,EAAMO,eAElCP,EAAMX,UCGEmB,EAbE,SAAAR,GAAK,OACpBR,EAAAC,EAAAC,cAAA,WAASC,UAAU,YAChBK,EAAMf,YAAYG,IAAI,SAACC,EAAQoB,GAAT,OACrBjB,EAAAC,EAAAC,cAACgB,EAAD,CACEC,IAAKtB,EAASoB,EACdpB,OAAQA,EAAON,cACfwB,YAAalB,EAAON,cAEpBuB,QAAS,mBCNXM,SAAO,8BAEPC,EAAe,SAACxB,EAAQyB,GAK5B,OAJAC,QAAQC,IACN,gBACAF,EAAIxB,QAAQD,IAAW,EAAI,cAAgB,aAEtCyB,EAAIxB,QAAQD,IAAW,EAAI,cAAgB,aA8CrC4B,EA3CM,SAAAjB,GAAK,OACxBR,EAAAC,EAAAC,cAAA,WAASC,UAAU,YACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACZiB,EAAK5B,MAAM,GAAI,IAAII,IAAI,SAAAC,GAAM,OAC5BG,EAAAC,EAAAC,cAACgB,EAAD,CACEC,IAAKtB,EACLA,OAAQA,EACRkB,YAAalB,EACbc,OAAQU,EAAaxB,EAAQW,EAAMb,iBACnCmB,QAAS,kBAAMN,EAAMM,QAAQjB,SAInCG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACZiB,EACEM,MAAM,GAAIN,EAAK9B,QACfE,MAAM,GAAI,GACVI,IAAI,SAAAC,GAAM,OACTG,EAAAC,EAAAC,cAACgB,EAAD,CACEC,IAAKtB,EACLA,OAAQA,EACRkB,YAAalB,EACbc,OAAQU,EAAaxB,EAAQW,EAAMb,iBACnCmB,QAAS,kBAAMN,EAAMM,QAAQjB,SAIrCG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACZiB,EACEM,MAAM,GAAIN,EAAK9B,QACfE,MAAM,GAAI,GACVI,IAAI,SAAAC,GAAM,OACTG,EAAAC,EAAAC,cAACgB,EAAD,CACEC,IAAKtB,EACLA,OAAQA,EACRkB,YAAalB,EACbc,OAAQU,EAAaxB,EAAQW,EAAMb,iBACnCmB,QAAS,kBAAMN,EAAMM,QAAQjB,WC3C1B8B,SAPS,SAAAnB,GAAK,OAC3BR,EAAAC,EAAAC,cAAA,WAASC,UAAU,yBAAnB,qBACoBH,EAAAC,EAAAC,cAAA,WACjBM,EAAMb,mBCoFIiC,EAzCH,SAAApB,GAAS,IAAAqB,EArCA,WAAM,IAAAC,EACHC,mBAASnD,EAAMM,YAA9B8C,EADkBC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAAAK,EAEmBJ,mBAAS,IAF5BK,EAAAH,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAElBE,EAFkBD,EAAA,GAEFE,EAFEF,EAAA,GAAAG,EAGqBR,mBAAS,IAH9BS,EAAAP,OAAAC,EAAA,EAAAD,CAAAM,EAAA,GAGlB5C,EAHkB6C,EAAA,GAGDC,EAHCD,EAAA,GAAAE,EAIiBX,mBAAS,oBAJ1BY,EAAAV,OAAAC,EAAA,EAAAD,CAAAS,EAAA,GAIlBjC,EAJkBkC,EAAA,GAIHC,EAJGD,EAAA,GAAAE,EAKad,mBACpCnD,EAAMa,YAAYuC,EAAarC,IANRmD,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAKlBpD,EALkBqD,EAAA,GAKLC,EALKD,EAAA,GA2BzB,MAAO,CACLd,cACAK,iBACA1C,kBACAc,gBACAhB,cACAuD,aAxBmB,SAAAX,GACnBC,EAAkBD,GAClB,IAAMY,EAAqBtD,EAAgBuD,OAAOb,GAC9Cc,EAAgBd,EACpBL,EAAYlC,QAAQuC,IAAmB,EAClCc,GAAiB,mBACjBA,GAAiB,uBACtBP,EAAiBO,GACjBV,EAAmBQ,GACnB1B,QAAQC,IAAI,qBAAsByB,GAClC,IAAMG,EAAiBxE,EAAMa,YAAYuC,EAAaiB,GACtDF,EAAeK,GACf7B,QAAQC,IACN,gCACA5C,EAAMa,YAAYuC,EAAaiB,IAEjC1B,QAAQC,IAAI,uBAAwB/B,KAoBlC4D,GANFrB,EAFiBH,EAEjBG,YACAK,EAHiBR,EAGjBQ,eACA1C,EAJiBkC,EAIjBlC,gBACAc,EALiBoB,EAKjBpB,cACAhB,EANiBoC,EAMjBpC,YACAuD,EAPiBnB,EAOjBmB,aASF,OACEhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eACdH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,+BAEFF,EAAAC,EAAAC,cAACoD,EAAD,MACAtD,EAAAC,EAAAC,cAACqD,EAAD,MACAvD,EAAAC,EAAAC,cAACsD,EAAD,CACEnB,eAAgBA,EAChB5B,cAAeA,IAEjBT,EAAAC,EAAAC,cAACuD,EAAD,CAAUhE,YAAaA,IACvBO,EAAAC,EAAAC,cAACwD,EAAD,CAAiB/D,gBAAiBA,KAEpCK,EAAAC,EAAAC,cAACyD,EAAD,CACE3B,YAAaA,EACbrC,gBAAiBA,EACjBmB,QAxBgB,SAAAjB,IACqB,IAArCF,EAAgBG,QAAQD,IAC1BmD,EAAanD,MAwBbG,EAAAC,EAAAC,cAAA,kDC1Ec0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8fac50cd.chunk.js","sourcesContent":["const logic = {\n  words: [\n    \"dysentery\",\n    \"snakebite\",\n    \"hunting\",\n    \"river\",\n    \"goldrush\",\n    \"wagon\",\n    \"buffalo\",\n    \"measles\",\n    \"exhaustion\",\n    \"typhoid\",\n    \"cholera\",\n    \"exploration\",\n    \"cavalry\",\n    \"mountains\",\n    \"funeral\",\n    \"pioneer\",\n    \"independence\",\n    \"yukon\"\n  ],\n  colorStatus: {\n    available: \"lime\",\n    unavailable: \"#3f3f3f\"\n  },\n  cursorStatus: {},\n  chooseWord: () => {\n    return logic.words[Math.floor(Math.random() * logic.words.length)]\n      .toUpperCase()\n      .split(\"\");\n  },\n  displayWord: (word, selectedLetters) => {\n    return word.map(letter =>\n      selectedLetters.indexOf(letter) > -1 ? letter : \"-\"\n    );\n  }\n};\n\nexport default logic;\n","import React from \"react\";\n\nimport \"./EventArea.css\";\n\nconst EventArea = () => (\n  <section className=\"imageWrapper\">\n    <div className=\"eventImage\">\n      <img src=\"/img/event_fort.gif\" alt=\"Placeholder\" />\n    </div>\n    <div className=\"wagonImage\">\n      <img src=\"/img/wagon_default.gif\" alt=\"Placeholder\" />\n    </div>\n  </section>\n);\n\nexport default EventArea;\n","import React from \"react\";\n\nimport \"./FamilyArea.css\";\n\nconst FamilyArea = () => (\n  <section className=\"family\">\n    <div className=\"familyName\">Wilbur</div>\n    <div className=\"familyName\">Mabel</div>\n    <div className=\"familyName\">Walter</div>\n    <div className=\"familyName\">Eunice</div>\n    <div className=\"familyName\">Enos</div>\n    <div className=\"familyName\">Winifred</div>\n  </section>\n);\n\nexport default FamilyArea;\n","import React from \"react\";\n\nimport \"./ActionTextArea.css\";\n\nconst ActionTextArea = props => (\n  <section className=\"actionText\">\n    <p>{props.actionMessage}</p>\n  </section>\n);\n\nexport default ActionTextArea;\n","import React from \"react\";\n\nimport logic from \"../../utils/game\";\n\nimport \"./Letter.css\";\n\nconst Letter = props => {\n  return (\n    <div\n      className={props.status + \" letter\"}\n      style={{\n        color: logic.colorStatus[props.status]\n      }}\n      onClick={() => props.onClick(props.letterValue)}\n    >\n      {props.letter}\n    </div>\n  );\n};\n\nexport default Letter;\n","import React from \"react\";\n\nimport \"./WordArea.css\";\nimport Letter from \"../Letter/Letter\";\n\nconst WordArea = props => (\n  <section className=\"wordArea\">\n    {props.displayWord.map((letter, i) => (\n      <Letter\n        key={letter + i}\n        letter={letter.toUpperCase()}\n        letterValue={letter.toUpperCase()}\n        // status={\"available\"}\n        onClick={() => {}}\n      />\n    ))}\n  </section>\n);\nexport default WordArea;\n","import React from \"react\";\n\nimport \"./KeyboardArea.css\";\n\nimport Letter from \"../Letter/Letter\";\n// import logic from \"../../utils/game\";\n\nconst keys = \"QWERTYUIOPASDFGHJKLZXCVBNM\";\n\nconst letterStatus = (letter, arr) => {\n  console.log(\n    \"letterStatus:\",\n    arr.indexOf(letter) > -1 ? \"unavailable\" : \"available\"\n  );\n  return arr.indexOf(letter) > -1 ? \"unavailable\" : \"available\";\n};\n\nconst KeyboardArea = props => (\n  <section className=\"keyboard\">\n    <div className=\"keyboard-row keyboard-1\">\n      {keys.split(\"\", 10).map(letter => (\n        <Letter\n          key={letter}\n          letter={letter}\n          letterValue={letter}\n          status={letterStatus(letter, props.selectedLetters)}\n          onClick={() => props.onClick(letter)}\n        />\n      ))}\n    </div>\n    <div className=\"keyboard-row keyboard-2\">\n      {keys\n        .slice(10, keys.length)\n        .split(\"\", 9)\n        .map(letter => (\n          <Letter\n            key={letter}\n            letter={letter}\n            letterValue={letter}\n            status={letterStatus(letter, props.selectedLetters)}\n            onClick={() => props.onClick(letter)}\n          />\n        ))}\n    </div>\n    <div className=\"keyboard-row keyboard-3\">\n      {keys\n        .slice(19, keys.length)\n        .split(\"\", 7)\n        .map(letter => (\n          <Letter\n            key={letter}\n            letter={letter}\n            letterValue={letter}\n            status={letterStatus(letter, props.selectedLetters)}\n            onClick={() => props.onClick(letter)}\n          />\n        ))}\n    </div>\n  </section>\n);\nexport default KeyboardArea;\n","import React from \"react\";\n\nimport \"./SelectedLetters.css\";\n\nconst SelectedLetters = props => (\n  <section className=\"selected-letters-area\">\n    Selected Letters: <br />\n    {props.selectedLetters}\n  </section>\n);\n\nexport default SelectedLetters;\n","import React, { useState } from \"react\";\nimport logic from \"./utils/game\";\n\nimport \"./assets/css/reset.css\";\nimport \"./App.css\";\n\nimport EventArea from \"./components/EventArea/EventArea\";\nimport FamilyArea from \"./components/FamilyArea/FamilyArea\";\nimport ActionTextArea from \"./components/ActionTextArea/ActionTextArea\";\nimport WordArea from \"./components/WordArea/WordArea\";\nimport KeyboardArea from \"./components/KeyboardArea/KeyboardArea\";\nimport SelectedLetters from \"./components/SelectedLetters/SelectedLetters\";\n\nconst useGameState = () => {\n  const [currentWord] = useState(logic.chooseWord);\n  const [selectedLetter, setSelectedLetter] = useState(\"\");\n  const [selectedLetters, setSelectedLetters] = useState([]);\n  const [actionMessage, setActionMessage] = useState(\"Select a letter.\");\n  const [displayWord, setDisplayWord] = useState(\n    logic.displayWord(currentWord, selectedLetters)\n  );\n\n  const setGameState = selectedLetter => {\n    setSelectedLetter(selectedLetter);\n    const newSelectedLetters = selectedLetters.concat(selectedLetter);\n    let returnMessage = selectedLetter;\n    currentWord.indexOf(selectedLetter) > -1\n      ? (returnMessage += \" is in the word!\")\n      : (returnMessage += \" is not in the word!\");\n    setActionMessage(returnMessage);\n    setSelectedLetters(newSelectedLetters);\n    console.log(\"newSelectedLetters\", newSelectedLetters);\n    const newDisplayWord = logic.displayWord(currentWord, newSelectedLetters);\n    setDisplayWord(newDisplayWord);\n    console.log(\n      \"logic call for setDisplayWord\",\n      logic.displayWord(currentWord, newSelectedLetters)\n    );\n    console.log(\"Is new word updated?\", displayWord);\n  };\n  return {\n    currentWord,\n    selectedLetter,\n    selectedLetters,\n    actionMessage,\n    displayWord,\n    setGameState\n  };\n};\n\nconst App = props => {\n  const {\n    currentWord,\n    selectedLetter,\n    selectedLetters,\n    actionMessage,\n    displayWord,\n    setGameState\n  } = useGameState();\n\n  const onLetterClick = letter => {\n    if (selectedLetters.indexOf(letter) === -1) {\n      setGameState(letter);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <main className=\"GameWrapper\">\n        <header>\n          <h1>Oregon Adventure</h1>\n        </header>\n        <EventArea />\n        <FamilyArea />\n        <ActionTextArea\n          selectedLetter={selectedLetter}\n          actionMessage={actionMessage}\n        />\n        <WordArea displayWord={displayWord} />\n        <SelectedLetters selectedLetters={selectedLetters} />\n      </main>\n      <KeyboardArea\n        currentWord={currentWord}\n        selectedLetters={selectedLetters}\n        onClick={onLetterClick}\n      />\n      <footer>&copy; 2017-2019 Steven Martinez</footer>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}