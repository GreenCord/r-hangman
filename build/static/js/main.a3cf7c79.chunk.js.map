{"version":3,"sources":["utils/game.js","components/EventArea/EventArea.js","components/FamilyArea/FamilyArea.js","components/ActionTextArea/ActionTextArea.js","components/Letter/Letter.js","components/WordArea/WordArea.js","components/KeyboardArea/KeyboardArea.js","components/SelectedLetters/SelectedLetters.js","components/ReplayButton/ReplayButton.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["logic","family","name","alive","images","events","url","alt","msg","playing","gameover","winner","words","colorStatus","available","unavailable","chooseEvent","Math","floor","random","length","chooseWord","toUpperCase","split","displayWord","word","selectedLetters","map","letter","indexOf","EventArea","props","react_default","a","createElement","className","src","currentEvent","currentWagon","FamilyArea","f","key","style","color","ActionTextArea","actionMessage","Letter","status","onClick","letterValue","WordArea","i","components_Letter_Letter","keys","letterStatus","arr","KeyboardArea","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onLetterPress","bind","assertThisInitialized","e","preventDefault","keyPressed","String","fromCharCode","keyCode","test","document","addEventListener","removeEventListener","_this2","slice","Component","SelectedLetters","ReplayButton","Game","_useGameState","newFamily","member","_useState","useState","_useState2","slicedToArray","gameStatus","setGameStatus","_useState3","currentWord","_useState5","_useState6","setCurrentEvent","_useState7","_useState8","setCurrentWagon","_useState9","_useState10","selectedLetter","setSelectedLetter","_useState11","_useState12","setSelectedLetters","_useState13","_useState14","familyStatus","setFamilyStatus","_useState15","_useState16","currentFamilyMember","setCurrentFamilyMember","_useState17","_useState18","setActionMessage","_useState19","_useState20","setDisplayWord","setGameState","newSelectedLetters","concat","newDisplayWord","returnMessage","newGameStatus","useGameState","components_EventArea_EventArea","components_FamilyArea_FamilyArea","components_ActionTextArea_ActionTextArea","components_WordArea_WordArea","components_ReplayButton_ReplayButton","startNewGame","components_SelectedLetters_SelectedLetters","components_KeyboardArea_KeyboardArea","OregonAdventure","gameId","setGameId","src_Game_0","Boolean","window","location","hostname","match","ReactDOM","render","App_OregonAdventure","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3cf7c79.chunk.js","sourcesContent":["const logic = {\n  family: [\n    {\n      name: \"Wilbur\",\n      alive: true\n    },\n    {\n      name: \"Mabel\",\n      alive: true\n    },\n    {\n      name: \"Walter\",\n      alive: true\n    },\n    {\n      name: \"Eunice\",\n      alive: true\n    },\n    {\n      name: \"Enos\",\n      alive: true\n    },\n    {\n      name: \"Winifred\",\n      alive: true\n    }\n  ],\n  images: {\n    events: [\n      {\n        url: \"/img/event_river.gif\",\n        alt: \"River\",\n        msg: \"You reached a river. Guess a letter correctly to cross.\"\n      },\n      {\n        url: \"/img/event_forest.gif\",\n        alt: \"Forest\",\n        msg: \"You arrive at a forest. Guess a letter to hunt for food.\"\n      },\n      {\n        url: \"/img/event_fort.gif\",\n        alt: \"Fort\",\n        msg: \"You happen upon a fort. Guess a letter to resupply.\"\n      }\n    ],\n    playing: [{ url: \"/img/wagon_default.gif\", alt: \"Your wagon.\" }],\n    gameover: [\n      {\n        url: \"/img/lose_event.gif\",\n        alt: \"Your family died.\"\n      },\n      {\n        url: \"/img/lose_wagon.gif\",\n        alt: \"And so did your wagon.\"\n      }\n    ],\n    winner: [\n      {\n        url: \"/img/win_event.gif\",\n        alt: \"You won!\"\n      },\n      {\n        url: \"/img/win_wagon.gif\",\n        alt: \"Do the truffle shuffle!\"\n      }\n    ]\n  },\n  words: [\n    \"dysentery\",\n    \"snakebite\",\n    \"hunting\",\n    \"river\",\n    \"goldrush\",\n    \"wagon\",\n    \"buffalo\",\n    \"measles\",\n    \"exhaustion\",\n    \"typhoid\",\n    \"cholera\",\n    \"exploration\",\n    \"cavalry\",\n    \"mountains\",\n    \"funeral\",\n    \"pioneer\",\n    \"independence\",\n    \"yukon\"\n  ],\n  colorStatus: {\n    available: \"lime\",\n    unavailable: \"#3f3f3f\"\n  },\n  chooseEvent: () => {\n    return logic.images.events[\n      Math.floor(Math.random() * logic.images.events.length)\n    ];\n  },\n  chooseWord: () => {\n    return logic.words[Math.floor(Math.random() * logic.words.length)]\n      .toUpperCase()\n      .split(\"\");\n  },\n  displayWord: (word, selectedLetters) => {\n    return word.map(letter =>\n      selectedLetters.indexOf(letter) > -1 ? letter : \"-\"\n    );\n  }\n};\n\nexport default logic;\n","import React from \"react\";\n\nimport \"./EventArea.css\";\n\nconst EventArea = props => (\n  <section className=\"imageWrapper\">\n    <div className=\"eventImage\">\n      <img src={props.currentEvent.url} alt={props.currentEvent.alt} />\n    </div>\n    <div className=\"wagonImage\">\n      <img src={props.currentWagon.url} alt={props.currentWagon.alt} />\n    </div>\n  </section>\n);\n\nexport default EventArea;\n","import React from \"react\";\n\nimport \"./FamilyArea.css\";\n\nconst FamilyArea = props => (\n  <section className=\"family\">\n    {props.family.map(f => (\n      <div\n        key={f.name}\n        className=\"familyName\"\n        style={{ color: f.alive === true ? \"lime\" : \"maroon\" }}\n      >\n        {f.name}\n      </div>\n    ))}\n  </section>\n);\n\nexport default FamilyArea;\n","import React from \"react\";\n\nimport \"./ActionTextArea.css\";\n\nconst ActionTextArea = props => (\n  <section className=\"actionText\">\n    <p>\n      {props.actionMessage.length > 1\n        ? props.actionMessage\n        : props.currentEvent.msg}\n    </p>\n  </section>\n);\n\nexport default ActionTextArea;\n","import React from \"react\";\n\nimport logic from \"../../utils/game\";\n\nimport \"./Letter.css\";\n\nconst Letter = props => {\n  return (\n    <div\n      className={props.status + \" letter\"}\n      style={{\n        color: logic.colorStatus[props.status]\n      }}\n      onClick={() => props.onClick(props.letterValue)}\n    >\n      {props.letter}\n    </div>\n  );\n};\n\nexport default Letter;\n","import React from \"react\";\n\nimport \"./WordArea.css\";\nimport Letter from \"../Letter/Letter\";\n\nconst WordArea = props => (\n  <section className=\"wordArea\">\n    {props.displayWord.map((letter, i) => (\n      <Letter\n        key={letter + i}\n        letter={letter.toUpperCase()}\n        letterValue={letter.toUpperCase()}\n        // status={\"available\"}\n        onClick={() => {}}\n      />\n    ))}\n  </section>\n);\nexport default WordArea;\n","import React, { Component } from \"react\";\n\nimport \"./KeyboardArea.css\";\n\nimport Letter from \"../Letter/Letter\";\n\nconst keys = \"QWERTYUIOPASDFGHJKLZXCVBNM\";\n\nconst letterStatus = (letter, arr) => {\n  return arr.indexOf(letter) > -1 ? \"unavailable\" : \"available\";\n};\nclass KeyboardArea extends Component {\n  constructor(props) {\n    super(props);\n    this.onLetterPress = this.onLetterPress.bind(this);\n  }\n  onLetterPress(e) {\n    e.preventDefault();\n    const reg = /[a-zA-Z]/;\n    const keyPressed = String.fromCharCode(e.keyCode);\n    if (reg.test(keyPressed)) {\n      this.props.onClick(e.key.toUpperCase());\n    }\n  }\n  componentDidMount() {\n    document.addEventListener(\"keypress\", this.onLetterPress, false);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keypress\", this.onLetterPress, false);\n  }\n  render() {\n    return (\n      <section className=\"keyboard\">\n        <div className=\"keyboard-row keyboard-1\">\n          {keys.split(\"\", 10).map(letter => (\n            <Letter\n              key={letter}\n              letter={letter}\n              letterValue={letter}\n              status={letterStatus(letter, this.props.selectedLetters)}\n              onClick={() => this.props.onClick(letter)}\n            />\n          ))}\n        </div>\n        <div className=\"keyboard-row keyboard-2\">\n          {keys\n            .slice(10, keys.length)\n            .split(\"\", 9)\n            .map(letter => (\n              <Letter\n                key={letter}\n                letter={letter}\n                letterValue={letter}\n                status={letterStatus(letter, this.props.selectedLetters)}\n                onClick={() => this.props.onClick(letter)}\n              />\n            ))}\n        </div>\n        <div className=\"keyboard-row keyboard-3\">\n          {keys\n            .slice(19, keys.length)\n            .split(\"\", 7)\n            .map(letter => (\n              <Letter\n                key={letter}\n                letter={letter}\n                letterValue={letter}\n                status={letterStatus(letter, this.props.selectedLetters)}\n                onClick={() => this.props.onClick(letter)}\n              />\n            ))}\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default KeyboardArea;\n","import React from \"react\";\n\nimport \"./SelectedLetters.css\";\n\nconst SelectedLetters = props => (\n  <section className=\"infoArea\">\n    Selected Letters: <br />\n    {props.selectedLetters.length > 0 ? props.selectedLetters : \" \"}\n  </section>\n);\n\nexport default SelectedLetters;\n","import React from \"react\";\n\nimport \"./ReplayButton.css\";\n\nconst ReplayButton = props => (\n  <section className=\"replayInfoArea\">\n    <button onClick={props.onClick}>Play Again</button>\n  </section>\n);\n\nexport default ReplayButton;\n","import React, { useState } from \"react\";\nimport logic from \"./utils/game\";\n\nimport \"./assets/css/reset.css\";\nimport \"./Game.css\";\n\nimport EventArea from \"./components/EventArea/EventArea\";\nimport FamilyArea from \"./components/FamilyArea/FamilyArea\";\nimport ActionTextArea from \"./components/ActionTextArea/ActionTextArea\";\nimport WordArea from \"./components/WordArea/WordArea\";\nimport KeyboardArea from \"./components/KeyboardArea/KeyboardArea\";\nimport SelectedLetters from \"./components/SelectedLetters/SelectedLetters\";\nimport ReplayButton from \"./components/ReplayButton/ReplayButton\";\n\nconst useGameState = () => {\n  const newFamily = logic.family.map(member => {\n    return {\n      name: member.name,\n      alive: true\n    };\n  });\n  const [gameStatus, setGameStatus] = useState(\"playing\");\n  const [currentWord] = useState(logic.chooseWord);\n  const [currentEvent, setCurrentEvent] = useState(logic.chooseEvent);\n  const [currentWagon, setCurrentWagon] = useState(logic.images.playing[0]);\n  const [selectedLetter, setSelectedLetter] = useState(\"\");\n  const [selectedLetters, setSelectedLetters] = useState([]);\n  const [familyStatus, setFamilyStatus] = useState(newFamily);\n  const [currentFamilyMember, setCurrentFamilyMember] = useState(\n    familyStatus.length - 1\n  );\n  const [actionMessage, setActionMessage] = useState(\"\");\n  const [displayWord, setDisplayWord] = useState(\n    logic.displayWord(currentWord, selectedLetters)\n  );\n\n  const setGameState = selectedLetter => {\n    if (gameStatus === \"playing\") {\n      const newSelectedLetters = selectedLetters.concat(selectedLetter);\n      const newDisplayWord = logic.displayWord(currentWord, newSelectedLetters);\n      let returnMessage = \"\";\n      let newGameStatus = \"playing\";\n\n      if (currentWord.indexOf(selectedLetter) > -1) {\n        if (newDisplayWord.indexOf(\"-\") > -1) {\n          setCurrentEvent(logic.chooseEvent);\n        } else {\n          setCurrentEvent(logic.images.winner[0]);\n          setCurrentWagon(logic.images.winner[1]);\n          newGameStatus = \"winner\";\n          returnMessage = \"Congratulations! You made it to Oregon!\";\n        }\n      } else {\n        const newFamily = familyStatus;\n        newFamily[currentFamilyMember].alive = !newFamily[currentFamilyMember]\n          .alive;\n        setFamilyStatus(newFamily);\n        if (currentFamilyMember === 0) {\n          setCurrentEvent(logic.images.gameover[0]);\n          setCurrentWagon(logic.images.gameover[1]);\n          newGameStatus = \"gameover\";\n          returnMessage = \"You didn't make it to Oregon.\";\n        } else {\n          setCurrentFamilyMember(currentFamilyMember - 1);\n        }\n      }\n\n      setSelectedLetter(selectedLetter);\n      setActionMessage(returnMessage);\n      setSelectedLetters(newSelectedLetters);\n      setDisplayWord(newDisplayWord);\n      setGameStatus(newGameStatus);\n    }\n  };\n  return {\n    gameStatus,\n    currentWord,\n    currentEvent,\n    currentWagon,\n    selectedLetter,\n    selectedLetters,\n    familyStatus,\n    actionMessage,\n    displayWord,\n    setGameState\n  };\n};\n\nconst Game = props => {\n  const {\n    gameStatus,\n    currentWord,\n    currentEvent,\n    currentWagon,\n    selectedLetter,\n    selectedLetters,\n    familyStatus,\n    actionMessage,\n    displayWord,\n    setGameState\n  } = useGameState();\n\n  const onLetterClick = letter => {\n    if (selectedLetters.indexOf(letter) === -1) {\n      setGameState(letter);\n    }\n  };\n\n  return (\n    <div className=\"Game\">\n      <main className=\"GameWrapper\">\n        <header>\n          <h1>Oregon Adventure</h1>\n        </header>\n        <EventArea currentEvent={currentEvent} currentWagon={currentWagon} />\n        <FamilyArea family={familyStatus} />\n        <ActionTextArea\n          selectedLetter={selectedLetter}\n          actionMessage={actionMessage}\n          currentEvent={currentEvent}\n        />\n        <WordArea displayWord={displayWord} />\n        {gameStatus !== \"playing\" ? (\n          <ReplayButton onClick={props.startNewGame} />\n        ) : (\n          <SelectedLetters selectedLetters={selectedLetters} />\n        )}\n      </main>\n      <KeyboardArea\n        currentWord={currentWord}\n        selectedLetters={selectedLetters}\n        onClick={onLetterClick}\n      />\n      <footer>\n        &copy; 2017-2019 <span className=\"footer-name\">Steven Martinez</span>\n      </footer>\n    </div>\n  );\n};\n\nexport default Game;\n","import React, { useState } from \"react\";\nimport Game from \"./Game\";\n\nconst OregonAdventure = () => {\n  const [gameId, setGameId] = useState(1);\n  return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />;\n};\n\nexport default function App() {\n  return <OregonAdventure />;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}