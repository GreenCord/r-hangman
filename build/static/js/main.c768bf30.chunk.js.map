{"version":3,"sources":["utils/game.js","components/EventArea/EventArea.js","components/FamilyArea/FamilyArea.js","components/ActionTextArea/ActionTextArea.js","components/Letter/Letter.js","components/WordArea/WordArea.js","components/KeyboardArea/KeyboardArea.js","components/SelectedLetters/SelectedLetters.js","App.js","serviceWorker.js","index.js"],"names":["logic","words","chooseWord","Math","floor","random","length","toUpperCase","split","EventArea","react_default","a","createElement","className","src","alt","FamilyArea","ActionTextArea","props","actionMessage","Letter","onClick","letterValue","letter","WordArea","currentWord","map","i","components_Letter_Letter","key","console","log","keys","KeyboardArea","slice","SelectedLetters","selectedLetters","App","_useGameState","_useState","useState","Object","slicedToArray","_useState3","_useState4","selectedLetter","setSelectedLetter","_useState5","_useState6","setActionMessage","_useState7","_useState8","setSelectedLetters","setGameState","newSelectedLetters","concat","returnMessage","indexOf","useGameState","components_EventArea_EventArea","components_FamilyArea_FamilyArea","components_ActionTextArea_ActionTextArea","components_WordArea_WordArea","components_SelectedLetters_SelectedLetters","components_KeyboardArea_KeyboardArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c768bf30.chunk.js","sourcesContent":["const logic = {\n  words: [\n    \"dysentery\",\n    \"snakebite\",\n    \"hunting\",\n    \"river\",\n    \"goldrush\",\n    \"wagon\",\n    \"buffalo\",\n    \"measles\",\n    \"exhaustion\",\n    \"typhoid\",\n    \"cholera\",\n    \"exploration\",\n    \"cavalry\",\n    \"mountains\",\n    \"funeral\",\n    \"pioneer\",\n    \"independence\",\n    \"yukon\"\n  ],\n  chooseWord: () => {\n    return logic.words[Math.floor(Math.random() * logic.words.length)]\n      .toUpperCase()\n      .split(\"\");\n  }\n};\n\nexport default logic;\n","import React from \"react\";\n\nimport \"./EventArea.css\";\n\nconst EventArea = () => (\n  <section className=\"imageWrapper\">\n    <div className=\"eventImage\">\n      <img src=\"/img/event_fort.gif\" alt=\"Placeholder\" />\n    </div>\n    <div className=\"wagonImage\">\n      <img src=\"/img/wagon_default.gif\" alt=\"Placeholder\" />\n    </div>\n  </section>\n);\n\nexport default EventArea;\n","import React from \"react\";\n\nimport \"./FamilyArea.css\";\n\nconst FamilyArea = () => (\n  <section className=\"family\">\n    <div className=\"familyName\">Wilbur</div>\n    <div className=\"familyName\">Mabel</div>\n    <div className=\"familyName\">Walter</div>\n    <div className=\"familyName\">Eunice</div>\n    <div className=\"familyName\">Enos</div>\n    <div className=\"familyName\">Winifred</div>\n  </section>\n);\n\nexport default FamilyArea;\n","import React from \"react\";\n\nimport \"./ActionTextArea.css\";\n\nconst ActionTextArea = props => (\n  <section className=\"actionText\">\n    <p>{props.actionMessage}</p>\n  </section>\n);\n\nexport default ActionTextArea;\n","import React from \"react\";\n\nconst Letter = props => (\n  <div className=\"letter\" onClick={() => props.onClick(props.letterValue)}>\n    {props.letter}\n  </div>\n);\n\nexport default Letter;\n","import React from \"react\";\n\nimport \"./WordArea.css\";\nimport Letter from \"../Letter/Letter\";\n\nconst WordArea = props => (\n  <section className=\"wordArea\">\n    {props.currentWord.map((letter, i) => (\n      <Letter\n        key={letter + i}\n        letter=\"-\"\n        letterValue={letter.toUpperCase()}\n        onClick={console.log}\n      />\n    ))}\n  </section>\n);\nexport default WordArea;\n","import React from \"react\";\n\nimport \"./KeyboardArea.css\";\n\nimport Letter from \"../Letter/Letter\";\n\nconst keys = \"QWERTYUIOPASDFGHJKLZXCVBNM\";\n\nconst KeyboardArea = props => (\n  <section className=\"keyboard\">\n    <div className=\"keyboard-row keyboard-1\">\n      {keys.split(\"\", 10).map(letter => (\n        <Letter\n          key={letter}\n          letter={letter}\n          letterValue={letter}\n          onClick={() => props.onClick(letter)}\n        />\n      ))}\n    </div>\n    <div className=\"keyboard-row keyboard-2\">\n      {keys\n        .slice(10, keys.length)\n        .split(\"\", 9)\n        .map(letter => (\n          <Letter\n            key={letter}\n            letter={letter}\n            onClick={() => props.onClick(letter)}\n          />\n        ))}\n    </div>\n    <div className=\"keyboard-row keyboard-3\">\n      {keys\n        .slice(19, keys.length)\n        .split(\"\", 7)\n        .map(letter => (\n          <Letter\n            key={letter}\n            letter={letter}\n            onClick={() => props.onClick(letter)}\n          />\n        ))}\n    </div>\n  </section>\n);\nexport default KeyboardArea;\n","import React from \"react\";\n\nimport \"./SelectedLetters.css\";\n\nconst SelectedLetters = props => (\n  <section className=\"selected-letters-area\">\n    Selected Letters: <br />\n    {props.selectedLetters}\n  </section>\n);\n\nexport default SelectedLetters;\n","import React, { useState } from \"react\";\nimport logic from \"./utils/game\";\n\nimport \"./assets/css/reset.css\";\nimport \"./App.css\";\n\nimport EventArea from \"./components/EventArea/EventArea\";\nimport FamilyArea from \"./components/FamilyArea/FamilyArea\";\nimport ActionTextArea from \"./components/ActionTextArea/ActionTextArea\";\nimport WordArea from \"./components/WordArea/WordArea\";\nimport KeyboardArea from \"./components/KeyboardArea/KeyboardArea\";\nimport SelectedLetters from \"./components/SelectedLetters/SelectedLetters\";\n\nconst useGameState = () => {\n  const [currentWord] = useState(logic.chooseWord);\n  const [selectedLetter, setSelectedLetter] = useState(\"\");\n  const [actionMessage, setActionMessage] = useState(\"Select a letter.\");\n  const [selectedLetters, setSelectedLetters] = useState([]);\n\n  const setGameState = selectedLetter => {\n    setSelectedLetter(selectedLetter);\n    console.log(\"selectedLetters\", selectedLetters);\n    console.log(\"Type of selectedLetters\", typeof selectedLetters);\n    const newSelectedLetters = selectedLetters.concat(selectedLetter);\n    console.log(\"newSelectedLetters\", newSelectedLetters);\n    console.log(\"Type of newSelectedLetters\", typeof newSelectedLetters);\n\n    let returnMessage = selectedLetter;\n    currentWord.indexOf(selectedLetter) > -1\n      ? (returnMessage += \" is in the word!\")\n      : (returnMessage += \" is not in the word!\");\n    setActionMessage(returnMessage);\n    setSelectedLetters(newSelectedLetters);\n  };\n  return {\n    currentWord,\n    selectedLetter,\n    actionMessage,\n    selectedLetters,\n    setGameState\n  };\n};\n\nconst App = props => {\n  const {\n    currentWord,\n    selectedLetter,\n    actionMessage,\n    selectedLetters,\n    setGameState\n  } = useGameState();\n\n  const onLetterClick = letter => {\n    setGameState(letter);\n    // props.setSelectedLetter(letter);\n    // if (currentWord.indexOf(letter) > -1) {\n    //   return console.log(letter + \" is in the word!\");\n    // } else {\n    //   return console.log(letter + \" is not in the word!\");\n    // }\n  };\n\n  return (\n    <div className=\"App\">\n      <main className=\"GameWrapper\">\n        <header>\n          <h1>Oregon Adventure</h1>\n        </header>\n        <EventArea />\n        <FamilyArea />\n        <ActionTextArea\n          selectedLetter={selectedLetter}\n          actionMessage={actionMessage}\n        />\n        <WordArea currentWord={currentWord} />\n        <SelectedLetters selectedLetters={selectedLetters} />\n      </main>\n      <KeyboardArea currentWord={currentWord} onClick={onLetterClick} />\n      <footer>&copy; 2017-2019 Steven Martinez</footer>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}